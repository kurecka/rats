import numpy as np

from rats import envs
from rats import agents
from rats.utils import set_log_level

# 08 09 10 11 12
# 15 16 17 18 19
# 22 23 24 25 26
# 29 30 31 32 33
# 36 37 38 39 40
# 43 44 45 46 47


set_log_level("trace")

map = """
#######
#BTTTG#
#..T..#
#.....#
##TT#.#
#GTTG.#
#..T..#
#######
"""

map2 = """
#######
#BTTTG#
#..TT.#
#....T#
##TT#T#
#TTTTT#
#.TT..#
#GG..G#
#######
"""

map3 = """
#######
#BTTTG#
#..TT.#
#....T#
##TT#T#
#TTT.T#
#.TT..#
#GG..G#
#######
"""

map4 = """
#####
#B.##
##.T#
##.T#
##G##
#####
"""

# big configs:
# time: 250ms, 500ms, 750ms, 1000ms, 1500ms, 2000ms, 3000ms, 5000ms - RAMCP only upto 500ms, after that LP is too slow
# d: 1, 5, 10
# num_steps: 500
# gamma: 0.95
# thd: 0, 0.1, 0.2, 0.3, 0.4, 0.5
# 100 runs

# 58x20
# exactly solvable with thd=0, main focus p_trap = 1, p_slide = 0.1
# conf:
# p_trap: 0.6, 1
# p_slide: 0.4, 0.1
map_big1 = """
##########################################################
#B...TTTT.T..GG.G#.......TTTT...............#..........GG#
#...........G....#.................G........#.......TGG..#
#......GG.....G.G#........GGGGG...G.........#.......T....#
#..TT...##########.................#G.......#.......T....#
#.....G.......G..#.......TTTT.G....#........#.......T....#
#.....G.......G.G#.............G...#........#.......T...G#
#.......TTTTT..G.#.................#..G.....#...........G#
#............T...#.T.T.T...........#........#.....GG.....#
#............T..G#.................#........#.....GG...TT#
#............T...#.....T........G..#........#............#
#.................G....T...........#........#T.T.T.TT..G.#
#........TT........G...............#........#............#
#................G.G...T...........#..G.....#.......GGG..#
#......................T..........G#........#............#
#..................................#........######....TTT#
#..................GT..T...#####...T.....................#
#..................G........GGG....T.....#G#G#....GGG....#
#......................G...........T.....#G#G#...TT......#
##########################################################
"""

# 36x18 29 golds
# exactly solvable with thd = p_trap + 3 * (p_slide / 2)
# 2 * p_slide is enough but not for these algorithms
# thd = 0 -> 6 golds
# thd = p_trap -> 12 golds
# thd = p_trap + p_slide / 2 -> 27 golds
# conf:
# p_trap: 0.1, 0.3
# p_slide: 0.4, 0.1, 0
map_big2 = """
####################################
#.........G..G........G....T...G.G.#
#..................................#
#........G.G..........T....T..TTTT.#
#.................GG..T............#
######TTTTT#########..T...GG......G#
#..............#...#..TTTT#####.T..#
#B...G.........#####......######T..#
#####..........#####GT....#####....#
#.....G........#####.#######....T..#
#.....###T#....#####....G.....###.G#
#.....###T#....#####..G##....G###..#
#.....###G#....#######..TTT...T##..#
#.....G.G......T...............#...#
#..............T...T..TTT.TG...T...#
#.....TTT......T...###.............#
#............G.T...G...G.......T.GG#
####################################
"""

# 36x17 35 golds
# p_trap = 0.1 has to be small, p_slide = 0.1 also good to be small
# ~ 15 gold w/ thd = 3 * p_trap
# conf:
# p_trap: 0.1
# p_slide: 0.3, 0.1, 0
map_big3 = """
####################################
#.....................##############
#############T.GGG.T.#G...T....T..T#
#############.TTTTT.T#..T....T.TTGG#
#..GG..######.......##...G..G.T.T..#
#......######...G...##...TT...T.T.T#
#TTTTTT######T.T.T.T##G...T..TT.TGG#
#......TTG..........##.....TT.T.T.T#
#......TT.GG........#........T.TG.T#
#......######......G#T.T...TGG.T.T.#
#.G.G..######.......#.T.........TT.#
#T.T.TT######..G....#G...#.....T.T.#
#.T.T.T...###G......#G...##T.T.T.TT#
#.....T...###TT...G.T...T##.G.G.G..#
#..G..T.G.###..........TT##........#
#B....T...###G........TTT##T#T#G#TT#
####################################
"""

# pseudo-random
# conf:
# p_trap: 0.2, 0.7
# p_slide: 0.1, 0.4
map_big4 = """
##########################################################
#B...TTTT.......G#.....####TT..............G#...........G#
#....T..T........T......T..........G...####..........G...#
#....T........G.GT...#G......GG.............#...G...T....#
#G.TT.TT########.#...#G............#G.......#.T.....TG...#
#..G..G...T...G..#......TT..T.G....#........#.T.....T....#
#.....G.......G.G#...GT........G...#.....G..###.....T....#
#.......T...T..G...................#..G.....T...........G#
#.G....G..G..T...#.T.#.T..G..............TTTT......G.....#
#...T........T..G#...#...TT........T........#..........TT#
#.G.T..GT....T...#...#.T........G..T...G....#............#
#.................G....T..G.T......#........#T.T.T.TT..G.#
###.##...TT...G....T......G.T......#........#............#
#.............G..G.G...T...........#..G.....T.........G..#
#....G....T...T........T....G.....G#........T............#
#.........T...###..................#....G#####TT##....TTT#
#.....G...G........GT..T...TTT##...T.....................#
#.............G....G.........GG....T###......G.....GG....#
#...........TTT........G..................GTT####TT......#
##########################################################
"""

# GPT
# p_trap: 0.2, 0.7
# p_slide: 0.1, 0.4
map_big5 = """
##########################################################
#B.....G.......T..G#....T####T..T..........T...G#...T.T.T#
#.....T..T........T......T..........G...####..........T..#
#....T........G.GT...#G......GG.............#...G...T....#
#G.TT.TT########.#...#G............#G.......#.T.....TG...#
#..G..G...T...G..#......TT..T.G....#........#.T.....T....#
#.....G.......G.G#...GT........G...#.....G..###.....T....#
#.......T...T..G...................#..G.....T...........G#
#.G....G..G..T...#.T.#.T..G..............TTTT......G.....#
#...T........T..G#...#...TT........T........#..........TT#
#.G.T..GT....T...#...#.T........G..T...G....#............#
#.................G....T..G.T......#........#T.T.T.TT..G.#
###.##...TT...G....T......G.T......#........#............#
#.............G..G.G...T...........#..G.....T.........G..#
#....G....T...T........T....G.....G#........T............#
#.........T...###..................#....G#####TT##....TTT#
#.....G...G........GT..T...TTT##...T.....................#
#.............G....G.........GG....T###......G.....GG....#
#...........TTT........G..................GTT####TT......#
##########################################################
"""


# set_log_level('trace')

r = 0
p = 0
sr = 0
sp = 0

for i in range(1):
    e = envs.Hallway(map_big1, 0.1, 0.1)
    # e = envs.InvestorEnv(2, 20)
    h = envs.EnvironmentHandler(e, 500)
    a = agents.ParetoUCT(
        h,
        max_depth=500, num_sim=1000, sim_time_limit=500, risk_thd=0.3, gamma=0.95,
        exploration_constant=5
    )

    e.reset()
    a.reset()
    while not a.get_handler().is_over():
        a.play()
        s = a.get_handler().get_current_state()
        print("Step:", a.get_handler().get_num_steps(), "State: (", s[0] % e.get_width(), ",", s[0] // e.get_width(), ")", "Reward:", a.get_handler().get_reward(), "Penalty:", a.get_handler().get_penalty())
        # print()
    h = a.get_handler()
    print(h.get_reward())
    r += (h.get_reward() - r) / (i+1)
    sr += h.get_reward()
    p += (h.get_penalty() - p) / (i+1)
    sp += h.get_penalty()
    print(f'{i}: {r} {p}')

print(sr/10, sp/10)
# r /= 300
# p /= 300
# print(f"Average reward: {r}")
# print(f"Average penalty: {p}")


# e = envs.Hallway(map, 0.1)
# h = envs.EnvironmentHandler(e, 100)
# a = agents.ParetoUCT(
#     h,
#     max_depth=100, num_sim=1000, sim_time_limit=250, risk_thd=0.1, gamma=0.9999,
#     exploration_constant=0.1, graphviz_depth=3
# )


# e.reset()
# a.reset()

# i = 0
# # while not a.get_handler().is_over():
# for i in range(10):
#     print(f'{i}: {a.get_handler().get_current_state()}')
#     a.play()
#     with open(f"../logs/tree_{i}.dot", "w") as f:
#         f.write(a.get_graphviz())
#     # i+=1
